generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email     String @unique
  telephone String
  password  String

  name      String?
  image     String?
  position  String?
  biography String?

  roles           Role
  permissions     Permission       @default(user)
  token           String?
  meets           MeetEnrollment[]
  categories      Category[]
  userPreferences UserPreferences?

  createdAt DateTime @default(now())
}

model Meet {
  id          String  @id @default(uuid())
  image       String?
  name        String
  meetDetails String?
  price       Decimal

  // Relation Fields
  categories Category[]
  reviews    Reviews[]
  members    MeetEnrollment[]
  createdAt  DateTime         @default(now())
}

model MeetEnrollment {
  createdAt DateTime @default(now())
  roles     Role
  room      String?

  // Relation Fields
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  meetId            String
  meet              Meet             @relation(fields: [meetId], references: [id])
  meetTransactionId String?
  meetTransaction   MeetTransaction? @relation(fields: [meetTransactionId], references: [id])
  //TODO: Permissions
  @@id([userId, meetId])
  @@index([userId, roles])
}

model MeetTransaction {
  id String @id @default(uuid())

  status                 String
  refse_reason           String
  status_reason          String
  acquirer_response_code String
  acquirer_name          String
  acquirer_id            String
  authorization_code     String
  date_created           String
  date_updated           String
  amount                 Int
  authorized_amount      Int
  paid_amount            Int
  refunded_amount        Int
  installments           Int
  cost                   Int
  card_holder_name       String
  card_last_digits       String
  card_first_digits      String
  card_brand             String
  card_pin_mode          String
  postback_url           String
  payment_method         String
  capture_method         String
  antifraud_score        String
  boleto_url             String
  boleto_barcode         String
  boleto_expiration_date String
  referer                String
  email                  String
  MeetEnrollment         MeetEnrollment[]
}

enum Role {
  administrator
  user
  mentor
}

enum Permission {
  user
  mentor
}

model UserPreferences {
  id String @id @default(uuid())

  categories Category[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id          String  @id @default(uuid())
  name        String
  description String?

  subCategory    SubCategory?
  userPreference UserPreferences[]
  meets          Meet[]
  users          User[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String   @unique
  category   Category @relation(fields: [categoryId], references: [id])
}

model Reviews {
  id          String  @id @default(uuid())
  rating      Int
  title       String?
  description String

  meetId String @unique
  meet   Meet   @relation(fields: [meetId], references: [id])
}
