generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email     String @unique
  telephone String
  password  String

  roles           Role             @default(user)
  token           String?
  meets           MeetEnrollment[]
  userPreferences UserPreferences?

  createdAt DateTime @default(now())
}

model Mentor {
  id String @id @default(uuid())

  email     String  @unique
  telephone String
  password  String
  name      String?
  image     String?
  position  String?
  biography String?
  token     String?

  categories     Category[]
  meets          Meet[]
  meetEnrollment MeetEnrollment[]
  roles          Role             @default(mentor)
}

model Meet {
  id          String           @id @default(uuid())
  name        String
  meetDetails String?
  price       Decimal
  // Relation Fields
  reviews     Reviews[]
  members     MeetEnrollment[]

  mentorId String @unique
  mentor   Mentor @relation(fields: [mentorId], references: [id])
}

model MeetEnrollment {
  id         String           @id @default(uuid())
  createdAt  DateTime         @default(now())
  roles      Role
  room       String?
  transition MeetTransaction?

  // Relation Fields
  userId   String
  meetId   String
  mentorId String
  user     User   @relation(fields: [userId], references: [id])
  meet     Meet   @relation(fields: [meetId], references: [id])
  mentor   Mentor @relation(fields: [mentorId], references: [id])
}

model MeetTransaction {
  id String @id @default(uuid())

  status                 String
  refse_reason           String
  status_reason          String
  acquirer_response_code String
  acquirer_name          String
  acquirer_id            String
  authorization_code     String
  date_created           String
  date_updated           String
  amount                 Int
  authorized_amount      Int
  paid_amount            Int
  refunded_amount        Int
  installments           Int
  cost                   Int
  card_holder_name       String
  card_last_digits       String
  card_first_digits      String
  card_brand             String
  card_pin_mode          String
  postback_url           String
  payment_method         String
  capture_method         String
  antifraud_score        String
  boleto_url             String
  boleto_barcode         String
  boleto_expiration_date String
  referer                String
  email                  String

  meetEnrollmentId String         @unique
  meetEnrollment   MeetEnrollment @relation(fields: [meetEnrollmentId], references: [id])
}

enum Role {
  administrator
  user
  mentor
}

model UserPreferences {
  id String @id @default(uuid())

  categories Category[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Category {
  id   String @id @default(uuid())
  name String

  subCategory    SubCategory?
  userPreference UserPreferences[]
  Mentor         Mentor?           @relation(fields: [mentorId], references: [id])
  mentorId       String?
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  categoryId String   @unique
  category   Category @relation(fields: [categoryId], references: [id])
}

model Reviews {
  id          String  @id @default(uuid())
  rating      Int
  title       String?
  description String

  meetId String @unique
  meet   Meet   @relation(fields: [meetId], references: [id])
}
